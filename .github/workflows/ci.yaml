name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run linting
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          poetry run black --check --diff .

      - name: Run migrations check
        run: |
          poetry run python manage.py makemigrations --dry-run --check
        env:
          DJANGO_SETTINGS_MODULE: config.settings
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'test-secret-key-for-ci' }}

      - name: Run tests with coverage
        run: |
          poetry run coverage run -m pytest -v
          poetry run coverage xml
          poetry run coverage report
        env:
          DJANGO_SETTINGS_MODULE: config.settings
          CELERY_TASK_ALWAYS_EAGER: True
          CELERY_TASK_EAGER_PROPAGATES: True

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage.xml
          format: cobertura

  docker-image-test:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t store_of_seeds:latest .

      - name: Test Docker image
        run: |
          # Run container
          docker run --rm -d -p 8000:8000 --name test-container store_of_seeds:latest

          # Wait for the container to start properly
          echo "Waiting for container to start..."
          sleep 10

          # Show container logs for debugging
          echo "Container logs:"
          docker logs test-container

          # Test the admin endpoint first
          echo "Testing admin endpoint..."
          curl -f -LI http://localhost:8000/admin/ || {
            echo "Health check failed, showing logs:"
            docker logs test-container
            exit 1
          }

          # Test the main endpoint
          echo "Testing main endpoint..."
          curl -f -LI http://localhost:8000/ || {
            echo "Main endpoint test failed, showing logs:"
            docker logs test-container
            exit 1
          }

          # Clean up
          docker stop test-container
